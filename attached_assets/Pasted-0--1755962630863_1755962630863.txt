0) 목표

“디스코드 서버”에서 가상의 은행/통화/주식/급여/세금/뉴스-기반 주가반영/차트/거래 기록을 운영하고, 경매 시스템(관리자 주도 시작·종료·설정, 실시간 입찰/정산)과 주식 거래중지(Trading Halt)·상장폐지(Delist) 통제를 지원한다.
동시에 웹 대시보드(실시간 시세·경매·거래/세금 기록·뉴스분석 내역·설정)를 제공한다.

1) 기술 스택 (권장)

Bot/Backend: Node.js 20+, TypeScript, Express (REST), ws or Socket.IO (실시간), pnpm

DB: PostgreSQL 15+, Prisma(ORM) 또는 Knex + SQL 마이그레이션

Cache/Queue(선택): Redis (세금·경매 타이머/락·안티스나이핑)

Web Dashboard: Next.js 14(App Router) + React 18, Tailwind or Mantine, Chart.js/Lightweight-Charts

Auth: Discord OAuth2 (guild 스코프), 세션(JWT)

Infra: Docker Compose (api, bot, web, db, redis), GitHub Actions(CI), Fly.io/Render/Heroku 중 택1

코드 품질: ESLint + Prettier + ts-jest, Husky(pre-commit)

환경변수:

DISCORD_BOT_TOKEN, DISCORD_CLIENT_ID, DISCORD_PUBLIC_KEY

DATABASE_URL, REDIS_URL(선택)

APP_BASE_URL(대시보드)

2) 권한 모델

SUPER_ADMIN_ID: 특정 유저 ID는 어디서든 관리자.

서버 오너 또는 Administrator 권한 보유자는 관리자.

관리자 역할(guild 설정값 adminRoleId)도 관리자.

사업주 역할(guild 설정값 employerRoleId 또는 기본 상수) 보유자만 /급여 지급 가능.

3) 디스코드 봇 기능(슬래시 커맨드)

아래 모든 명령은 기존 구현을 유지하되, 경매와 **주식 통제(거래중지/상장폐지)**를 추가하고, 전체 명령은 길드 범위 내에서 작동.

3.1 은행 /은행

계좌개설(고유번호) — 초개설 보너스 10,000원, 3자리=공무원, 4자리=일반시민, 고유번호 1인 1계좌.

잔액(사용자?) — 타인 조회는 관리자만.

이체(받는사람, 금액, 메모?) — 이체 후 최소 1원 보전.

거래내역(사용자?, 개수?) — 은행/주식 통합 최근 N개를 임베드로.

급여받기 — 고정 안내(지급은 사업주가 처리).

관리:*

입금(사용자, 금액, 메모?) / 출금(사용자, 금액, 메모?) — 최소 1원 보전 규칙 준수.

계좌초기화(확인, 사유?) — 모든 계좌 0원 초기화(되돌릴 수 없음).

3.2 통화 /통화 (관리자)

발행(member, amount, memo?) / 압류(member, amount, memo?) — 최소 1원 보전.

기호(symbol) — 길드 통화 기호 설정.

3.3 계좌 /계좌 (관리자)

동결(member, reason?) / 동결해제(member)

3.4 일급 /일급 (관리자)

설정(사용자, amount) — 일급 금액만 설정(지급은 별도 /급여 지급).

숫자 리터럴은 JS 구분자(100_000) 사용으로 구현.

3.5 급여 /급여

지급(직원, 금액, 메모?) — 사업주만, 지급자 계좌 최소 1원 보전.

3.6 주식(일반) /주식

목록 가격(종목코드) 자산(사용자?) 매수(종목코드, 주) 매도(종목코드, 주)

포트폴리오(사용자?) 거래내역(간단 안내 또는 웹에서 전체 확인)

거래 제한 로직 추가:

종목 상태 active/halted/delisted 중 **halted(거래중지)**면 매수·매도 모두 거부(사유 표시).

**delisted(상장폐지)**면 거래 차단 + 보유분 처리 정책(아래 5.3 참고).

3.7 주식관리(관리자) /주식관리

생성(종목코드, 회사명, 초기가격, 총주식수?)

가격조정(종목코드, 새가격)

삭제(종목코드)

시장현황

추가:

거래중지(종목코드, 사유?) — 상태를 halted로 전환.

거래재개(종목코드) — 상태를 active로.

상장폐지(종목코드, 정산방식) — 상태를 delisted로, 정산은 옵션(아래 5.3).

3.8 차트 /차트, /멀티차트, /오늘의주식차트

기존 ASCII 캔들/볼륨/요약 보존.

상태 뱃지(ACTIVE/HALTED/DELISTED)와 안내 문구 포함.

자동 업데이트 문구는 “5초 시뮬레이션”로 표기.

3.9 세금 /세금설정 (관리자)

비율(퍼센트) — 0~50%

조회 — 현재 세율, 면세 기준(총자산 ≤ 1,000원), 월 1일 자동 징수 안내.

징수 — 즉시 징수.

월간 자동 스케줄: 매월 1일 00:00 (서버 시간), 총자산×세율을 현금 계좌에서만 차감, 최소 1원 보전.

3.10 뉴스 /뉴스분석, /뉴스설정, /뉴스내역

키워드 기반 분석(제공된 사전 + 가중), tanh 스코어 → 최대 변동률 기본 15% (길드 설정값).

뉴스설정 비율(퍼센트) — 뉴스 기반 최대 변동폭% 설정(1~50).

뉴스내역(종목코드?, 개수?) — 최근 기록 임베드.

3.11 경매(신규) /경매

유형: 단일 방식(영국식 상승경매) 우선.

관리자 서브커맨드

시작(아이템, 시작가, 종료분, 최소증분?, 즉시구매가?, 연장초?)

아이템: 자유 텍스트 또는 종목코드:수량 형태 지원(예: ABC:100).

최소증분 기본 1% (정수 금액도 허용).

즉시구매가(선택) — 즉시 낙찰.

연장초(선택) — 마감 N초 전 입찰 시 자동 연장(안티 스나이핑).

종료(경매ID, 사유?) — 조기종료/취소 구분.

설정(경매ID, 필드, 값) — 진행 중 파라미터(증분율, 연장 규칙 등) 일부 조정.

일반 사용자 서브커맨드

입찰(경매ID, 금액) — 에스ক্র로(잔액 홀드) 후 최고가 갱신, 직전 최고 입찰자 에스크로 환원.

정보(경매ID) — 상세 현황(남은시간, 최고가, 참여자수, 증분, 즉시구매가, 연장 규칙).

목록(상태?) — 진행중/예정/종료 목록.

정산/실패 시나리오

낙찰 시: 낙찰가 만큼 최종 차감 → 판매자에게 송금(판매자 주체가 관리자/시스템이면 시스템 수익).

즉시구매가로 종료 가능.

경매 취소/실패: 전원 에스크로 환원.

경매 수수료(선택): 길드 설정값으로 판매 수수료%를 두고 정산 시 공제 후 송금.

알림: 시작/연장/새 최고가/낙찰/취소 이벤트를 경매 채널(서버 내 텍스트 채널 자동 탐색: general/공지/알림/bot)로 임베드 브로드캐스트.

4) 실시간/스케줄

가격 시뮬레이션: 5초 간격 랜덤 변동(±3% 범위), halted/delisted 종목은 스킵.

경매 타이머: 초 단위(최소 1초)로 남은시간 관리, 연장초 로직 포함.

월간 세금: 위 3.9 준수.

웹 대시보드 실시간: WebSocket/Socket.IO 채널

stock_price_updated, stock_status_changed, auction_started, auction_bid, auction_extended, auction_settled, auction_canceled, tax_collected, news_applied 등.

5) 도메인 규칙
5.1 최소 잔액 보전

모든 출금성 트랜잭션(이체/매수/압류/세금/급여지급자/에스크로 홀드 포함)은 실행 후 잔액 ≥ 1원 보장.

5.2 계좌 동결

동결 시 모든 거래/이체/입찰 금지(경매 입찰도 금지).

5.3 상장폐지 정책(옵션화)

delisted 전환 시 관리자 입력 정산방식 선택:

현금청산: 마지막 가격로 보유 수량 × 가격을 현금으로 지급(길드 재원에서 나가는 것이므로 시스템 잔액 개념 없이 단순 입금 처리) 후 보유 0 처리.

무가치화: 보유 평가액 0 처리(자산에서 제거).

선택값은 기록되고, 대시보드·내역에 표시.

6) 데이터 모델(Prisma 표기 예시, 개념만 전달)

User(id, discordId, username, discriminator, avatar, createdAt)

GuildSettings(guildId, adminRoleId, employerRoleId, currencySymbol, taxRate, newsMaxImpactPct, auctionFeePct)

Account(id, guildId, userId, uniqueCode, balance, frozen)

Transaction(id, guildId, actorId, fromUserId?, toUserId?, type, amount, memo, ts)

Stock(id, guildId, symbol, name, price, totalShares, status: enum['active','halted','delisted'])

Holding(id, guildId, userId, symbol, shares, avgPrice)

StockTransaction(id, guildId, userId, symbol, type['buy'|'sell'], shares, price, totalAmount, ts)

NewsAnalysis(id, guildId, symbol, title, content, sentiment, sentimentScore, priceImpact, oldPrice, newPrice, createdBy, createdAt)

Auction(id, guildId, itemType['text'|'stock'], itemRef, // text일 때 자유 텍스트, stock일 때 "SYMB:QTY" startPrice, buyoutPrice?, minIncrementAbs?, minIncrementPct?, extendSeconds?, startedAt, endsAt, status['scheduled'|'live'|'ended'|'canceled'], sellerUserId?, canceledReason?)

AuctionBid(id, guildId, auctionId, bidderUserId, amount, createdAt, isWinningSnap)

Escrow(id, guildId, userId, auctionId, amount, status['held'|'released'|'captured'])

AuditLog(id, guildId, actorId, action, details, ts)

인덱스: ON (guildId), UNIQUE Stock(guildId,symbol), AuctionBid(auctionId, amount DESC) 등.

7) REST API (대시보드용, 예시)

Base /api JWT 보호(Discord OAuth2 로그인 후 발급).

GET /guilds/:gid/overview — 총자산/거래/세금/경매 요약(캐시).

GET /guilds/:gid/stocks / GET /stocks/:id / POST /stocks / PATCH /stocks/:id(가격/상태) / DELETE /stocks/:id

GET /guilds/:gid/auctions?status= — 목록, GET /auctions/:id

POST /auctions(시작), POST /auctions/:id/bid, POST /auctions/:id/cancel, POST /auctions/:id/close, PATCH /auctions/:id(설정변경)

GET /guilds/:gid/transactions?type=&userId=&limit=

GET /guilds/:gid/news?symbol=&limit= / POST /guilds/:gid/news/apply

GET /guilds/:gid/settings / PATCH /guilds/:gid/settings(세율/뉴스변동폭/수수료/역할 등)

8) 웹 대시보드 UX

로그인: Discord OAuth2 → 길드 선택 페이지.

오버뷰: 총 발행 통화, 거래 수, 상위 보유자, 오늘 변동 상위 종목, 진행중 경매 카드, 최근 뉴스 반영 로그, 최근 세금 징수 결과.

주식: 표 + 실시간 차트(상태 뱃지), 생성/가격조정/상태변경(거래중지/재개/상장폐지) 모달, 보유 상위 순위.

경매: 진행/예정/종료 탭, 상세 페이지(실시간 입찰 로그, 규칙, 남은시간, 즉시구매 버튼(권한 체크)), 관리자용 조기종료/설정 변경.

은행/거래: 사용자/유형 필터, CSV 내보내기.

뉴스: 분석 결과 리스트, 키워드 매칭/스코어/반영 전후 가격, 최대 변동률 설정.

세금: 현 세율/면세 기준/다음 징수일, 수동 징수 버튼, 최근 징수 히스토리.

설정: 관리자·사업주 역할 지정, 통화 기호, 세율, 뉴스 최대 변동률, 경매 수수료.

감사 로그: 관리 행위(가격조정/상태변경/경매취소 등).

9) 핵심 비즈니스 로직 상세
9.1 뉴스 분석 수식(키워드 사전 기반)

제공된 POS/NEG/BOOST/DAMP 사전을 사용:

텍스트 = normalize(title + content), 키워드 포함 시 가중 합산.

context = clamp(product(BOOST) * product(DAMP), 0.4, 1.6)

raw = (Σpos - Σneg) * context

score = tanh(raw/6)

sentiment: score > 0.12 => positive, < -0.12 => negative, else neutral

impact = clamp(score * (maxImpactPct/100), -maxImpactPct/100, maxImpactPct/100) with deadzone |score| < 0.03 → 0

newPrice = max(floor(oldPrice*(1+impact)), 1)

delisted는 반영 스킵.

9.2 주식 거래/상태

halted: 매수/매도 거절(사유 표시), 가격 시뮬레이터 스킵.

delisted: 매수/매도 거절, 보유 정산 정책 실행 후 보유 0 처리(현금청산/무가치화).

가격 시뮬레이터: 5초마다 모든 active 종목에만 (±3%) 변동.

9.3 경매

입찰 전 검증: 계좌 존재/동결 아님/잔액 충분(입찰가와 현재 최고가 비교 후 증분 규칙 만족).

에스크로: 입찰액만큼 즉시 홀드(잔액 차감), 신규 최고가 등장 시 직전 최고가 홀드 환원.

마감: endsAt 도달 시 낙찰자 확정, 에스크로 캡처하여 판매자에게 송금(+수수료 공제).

연장: 마감 N초 전 유효 입찰 발생 시 endsAt += extendSeconds.

즉시구매가: 도달 즉시 종료/정산.

10) 트랜잭션 타입(일부 예시)

initial_deposit, transfer_in/out, admin_deposit/withdraw/issue/seize,

payroll_in/out, tax,

stock buy/sell,

auction_hold(음수)/auction_release(양수)/auction_capture(음수→판매자 양수),

admin_freeze/unfreeze, admin_reset_all, stock_price_update, stock_status_change, news_adjust.

11) 에러/엣지 케이스

모든 출금성 작업은 “잔액 부족(거래 후 최소 1원)” 메시지 일관 표준화.

계좌 미개설/동결/상태 불가(거래중지/상장폐지) 명확 메시지.

경매 동시 입찰 경쟁 조건: DB 트랜잭션 + 낙관락(version) 또는 Redis 분산락.

경매/세금/뉴스 처리 중 실패 시 원자성 보장(롤백).

12) 대시보드 보안/권한

Discord OAuth2 로그인 후 길드 선택.

길드 내 관리자 권한이 없는 유저는 읽기 전용(또는 접근 제한).

모든 변경 API는 서버 측에서 길드 권한 재검증.

13) 테스트/수용 기준

단위: 뉴스 스코어→가격반영, 최소잔액 보전, 거래중지/상장폐지 거부, 경매 연장/정산.

통합: 경매 동시 입찰 경쟁, 에스크로 환원/캡처 일관성.

E2E: 대시보드에서 상태변경→봇 반영(WebSocket 이벤트 수신).

95%+ 주요 경로 커버리지 목표.

14) 제공물(Deliverables)

Discord Bot TypeScript 프로젝트(명령어 전체 구현 + 경매 + 주식상태 통제 + 스케줄러).

Backend API(Express) + WebSocket 서버.

Web Dashboard(Next.js) — 모든 페이지/컴포넌트/보호 라우팅.

DB 스키마/마이그레이션(Prisma/SQL) + 시드 스크립트.

Docker Compose(api, bot, web, db, redis).

.env.example, README(설치/개발/운영), CI 파이프라인.

테스트 코드(단위/통합/E2E 일부).

15) 구현 세부 가이드(요청)

기존 코드의 상수/사전(POS/NEG/BOOST/DAMP)과 도우미(safeToLocale, nowSec, tanh, clamp, normalizeText)는 유지·이식.

IStorage 인터페이스 확장(bot과 api에서 공용 사용):

사용자/계좌/거래: getUserByDiscordId, createUser, getAccount, createAccount, updateBalance(+/-), freezeAccount, resetAllAccounts, addTransaction, getTransactionsByUser

주식: getStocks, getStock, createStock, updateStockPrice, deleteStock, updateHolding, getHoldings, getStockTransactionsByUser, updateStockStatus(guildId, symbol, status)

뉴스: addNewsAnalysis, getNewsAnalyses, getNewsAnalysesBySymbol

길드 설정: getGuildSettings, updateGuildSetting

경매: createAuction, getAuctionById, listAuctions, placeBidWithEscrow(원자), releaseEscrow, captureEscrow, cancelAuction, closeAuction, extendAuction, getTopBid

수치 리터럴은 모두 언더스코어 구분자 사용(예: 1_000_000)로 버그 예방.

모든 임베드/응답 문구는 한글 유지, 실패 메시지 일관화.